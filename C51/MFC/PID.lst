C51 COMPILER V9.00   PID                                                                   11/30/2016 15:28:36 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN PID.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE hardware\PID.c BROWSE DEBUG OBJECTEXTEND PRINT(.\PID.lst) OBJECT(PID.obj)

line level    source

   1          #include "PID.h"
   2          #include "ADC.h"
   3          
   4          #include "PWM.h"
   5          #include "Uart1.h"
   6          #include "string.h"
   7          #include "math.h"
   8           
   9          
  10          //xdata struct PID spid; // PID Control Structure
  11          struct PID spid; // PID Control Structure
  12           
  13          unsigned int manuPWM = 0;
  14          
  15          bit PIDEnable=0;
  16          /************************************************
  17                        PID函数体 
  18          51单片机最不擅长浮点数计算，转换成int型计算
  19          *************************************************/
  20          int PIDCalc( struct PID *pp, unsigned int NextPoint ) 
  21          { 
  22   1        int Error,dError;
  23   1         
  24   1        Error = spid.set_point - NextPoint;       // 偏差E(t) 
  25   1        pp->SumError = pp->PrevError+pp->LastError+Error;                     // 积分
  26   1        dError=Error - pp->LastError;             // 当前微分
  27   1        pp->PrevError = pp->LastError; 
  28   1        pp->LastError = Error; 
  29   1      
  30   1        if(abs(Error)< pp->deadZone){
  31   2        pp->SumError = 0;
  32   2        return 0;
  33   2        }
  34   1      
  35   1        return ( 
  36   1                  pp->Proportion * Error        //比例 
  37   1                  + pp->Integral * pp->SumError     //积分项 
  38   1                  + pp->Derivative * dError     // 微分项      负责刹车
  39   1                              );  
  40   1      } 
  41          void GetPIDStatu(){
  42   1              SendInt1(spid.set_point,spid.rout);
  43   1      }  
  44          /*********************************************************** 
  45                       PID温度控制做动函数
  46          ***********************************************************/ 
  47          
  48          void PIDStart()                 //PID控制输出函数
  49          {  
  50   1           spid.rout += PIDCalc ( &spid,getCurrentVoatage() ); 
  51   1               if(spid.rout >PWM_HIGH_MAX)
  52   1                      spid.rout = PWM_HIGH_MAX; 
  53   1               if(spid.rout <PWM_HIGH_MIN)
  54   1                      spid.rout = PWM_HIGH_MIN;  
  55   1               LoadPWM(spid.rout) ;
C51 COMPILER V9.00   PID                                                                   11/30/2016 15:28:36 PAGE 2   

  56   1        
  57   1      }
  58          /************************************************
  59                                          PID函数初始化
  60          *************************************************/
  61          void PIDInit() 
  62          { 
  63   1      
  64   1        memset (&spid,0,sizeof(struct PID));  // Initialize Structure 
  65   1        
  66   1        spid.Proportion = 0.2; // Set PID Coefficients        0.009开始震荡，取60%~70%=       0.006  2 0 9 ok
  67   1        spid.Integral =   0.00; 
  68   1        spid.Derivative =3; 
  69   1        spid.rout = 0;
  70   1        spid.set_point = 4500;
  71   1        spid.deadZone = 10;
  72   1      }
  73          
  74            
  75          void SetSetPoint(unsigned int v_data)
  76          {
  77   1        spid.set_point =v_data;        
  78   1      }
  79          void SetPWMValue(unsigned int v_data)
  80          {
  81   1          manuPWM =   v_data; 
  82   1              if(manuPWM >PWM_HIGH_MAX)
  83   1                      manuPWM = PWM_HIGH_MAX; 
  84   1              if(manuPWM <PWM_HIGH_MIN)
  85   1                      manuPWM = PWM_HIGH_MIN;  
  86   1              LoadPWM(manuPWM); 
  87   1              spid.rout = manuPWM;
  88   1      
  89   1      }  
  90          void SetPIDparam_P_inc(unsigned int v_data)
  91          {
  92   1       
  93   1              if(v_data != 9999)spid.Proportion =     v_data/1000.0;
  94   1       
  95   1      
  96   1      } 
  97          void SetPIDparam_I_inc(unsigned int v_data)
  98          {
  99   1              if(v_data != 9999)spid.Integral   =      v_data/1000.0;
 100   1       
 101   1      
 102   1      } 
 103          void SetPIDparam_D_inc(unsigned int v_data)
 104          {
 105   1          if(v_data != 9999)spid.Derivative  =         v_data/1000.0;
 106   1       
 107   1      
 108   1      } 
 109          void  SetTClose()
 110          {
 111   1               PIDEnable = 0;
 112   1               LoadPWM(PWM_HIGH_MIN) ;
 113   1      }
 114          void  SetTOpen()
 115          {
 116   1               PIDEnable = 0;
 117   1               LoadPWM(PWM_HIGH_MAX) ;
C51 COMPILER V9.00   PID                                                                   11/30/2016 15:28:36 PAGE 3   

 118   1      }
 119          void  SetTPID()
 120          {
 121   1               PIDEnable = 1;
 122   1      
 123   1      }
 124          bit isPIDEnable(){
 125   1         return PIDEnable;
 126   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    596    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
